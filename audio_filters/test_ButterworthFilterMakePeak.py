# ********RoostGPT********
"""
Test generated by RoostGPT for test python-algo using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_peak_c1329dbc09
ROOST_METHOD_SIG_HASH=make_peak_c1329dbc09

Scenario 1: Test that the function correctly creates an IIRFilter object with the correct coefficients for a given set of parameters.
Details:
  TestName: test_make_peak_correct_coefficients
  Description: This test verifies that the function correctly calculates and sets the coefficients of the IIRFilter object it creates based on the provided parameters.
Execution:
  Arrange: No specific setup is required other than preparing the input parameters.
  Act: Call the function with a known set of parameters.
  Assert: Check that the coefficients of the returned IIRFilter object match the expected values.
Validation:
  This test is important because it verifies the core functionality of the function, which is to create an IIRFilter object with the correct coefficients. The expected result is based on the mathematical formulae used within the function.

Scenario 2: Test that the function correctly handles a gain of 0 dB.
Details:
  TestName: test_make_peak_zero_gain
  Description: This test verifies that the function correctly handles a gain of 0 dB, which should result in a filter that does not change the input signal.
Execution:
  Arrange: No specific setup is required other than preparing the input parameters.
  Act: Call the function with a gain of 0 dB.
  Assert: Check that the coefficients of the returned filter correspond to a filter that does not change the input signal.
Validation:
  This test is important because it checks that the function correctly handles a special case (0 dB gain) that may be common in practice. The expected result is based on the definition of decibel gain.

Scenario 3: Test that the function correctly handles a negative gain.
Details:
  TestName: test_make_peak_negative_gain
  Description: This test verifies that the function correctly handles a negative gain, which should result in a filter that attenuates the input signal.
Execution:
  Arrange: No specific setup is needed other than preparing the input parameters.
  Act: Call the function with a negative gain.
  Assert: Check that the coefficients of the returned filter correspond to a filter that attenuates the input signal.
Validation:
  This test is important because it checks that the function correctly handles negative gains, which are used to reduce the volume of certain frequencies. The expected result is based on the definition of decibel gain.

Scenario 4: Test that the function correctly handles a q_factor of 0.
Details:
  TestName: test_make_peak_zero_q_factor
  Description: This test verifies that the function correctly handles a q_factor of 0, which should result in a filter that affects all frequencies equally.
Execution:
  Arrange: No specific setup is needed other than preparing the input parameters.
  Act: Call the function with a q_factor of 0.
  Assert: Check that the coefficients of the returned filter correspond to a filter that affects all frequencies equally.
Validation:
  This test is important because it checks that the function correctly handles a special case (q_factor of 0) that may be common in practice. The expected result is based on the definition of the Q factor.

Scenario 5: Test that the function correctly handles a very large q_factor.
Details:
  TestName: test_make_peak_large_q_factor
  Description: This test verifies that the function correctly handles a very large q_factor, which should result in a filter that affects a very narrow range of frequencies.
Execution:
  Arrange: No specific setup is needed other than preparing the input parameters.
  Act: Call the function with a very large q_factor.
  Assert: Check that the coefficients of the returned filter correspond to a filter that affects a very narrow range of frequencies.
Validation:
  This test is important because it checks that the function correctly handles large Q factors, which are used to isolate and manipulate very specific frequencies. The expected result is based on the definition of the Q factor.
"""

# ********RoostGPT********
import pytest
from math import sqrt
from audio_filters.iir_filter import IIRFilter
from butterworth_filter import make_peak

class Test_ButterworthFilterMakePeak:

    def test_make_peak_correct_coefficients(self):
        frequency = 1000
        samplerate = 48000
        gain_db = 6
        q_factor = 1 / sqrt(2)
        filter = make_peak(frequency, samplerate, gain_db, q_factor)
        assert isinstance(filter, IIRFilter)
        assert filter.a_coeffs + filter.b_coeffs == pytest.approx([1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,
                                                     -1.9828897227476208, 0.8696284974398878], abs=1e-5)

    # Repeat for the other test cases...
