# ********RoostGPT********
"""
Test generated by RoostGPT for test python-pipenv using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_lowshelf_4cf0e3a9b4
ROOST_METHOD_SIG_HASH=make_lowshelf_4cf0e3a9b4

Scenario 1: Testing the make_lowshelf for valid inputs
Details:
  TestName: test_make_lowshelf_valid_inputs
  Description: This test will validate the make_lowshelf function's ability to create a low-shelf filter when provided with valid inputs.
Execution:
  Arrange: Initialize the function with frequency=1000, samplerate=48000, gain_db=6, and q_factor=1/sqrt(2).
  Act: Invoke the make_lowshelf function with the initialized parameters.
  Assert: Check if the output matches the expected coefficients.
Validation:
  It is crucial to ensure that the function works correctly with valid inputs. The expected result is based on the function's specifications and mathematical calculations.

Scenario 2: Testing the make_lowshelf function with extreme frequency values
Details:
  TestName: test_make_lowshelf_frequency_extremes
  Description: This test will validate the make_lowshelf function's response to extreme frequency values.
Execution:
  Arrange: Initialize the function with frequency set to extreme values (very low, very high), samplerate=48000, gain_db=6, and q_factor=1/sqrt(2).
  Act: Invoke the make_lowshelf function with the initialized parameters.
  Assert: Check if the function can handle these values without errors and if the output is within an acceptable range.
Validation:
  This test is important to ensure the function's robustness and its ability to handle edge cases gracefully. The expected result is based on the function's specifications and mathematical calculations.

Scenario 3: Testing the make_lowshelf function with zero gain_db
Details:
  TestName: test_make_lowshelf_zero_gain_db
  Description: This test will validate the make_lowshelf function's behavior when the gain_db is set to zero.
Execution:
  Arrange: Initialize the function with frequency=1000, samplerate=48000, gain_db=0, and q_factor=1/sqrt(2).
  Act: Invoke the make_lowshelf function with the initialized parameters.
  Assert: Check if the function can handle a zero gain_db value without errors and if the output is within an acceptable range.
Validation:
  This test is important to ensure the function's robustness and its ability to handle edge cases gracefully. The expected result is based on the function's specifications and mathematical calculations.

Scenario 4: Testing the make_lowshelf function with negative q_factor
Details:
  TestName: test_make_lowshelf_negative_q_factor
  Description: This test will validate the behavior of the make_lowshelf function when provided with a negative q_factor.
Execution:
  Arrange: Initialize the function with frequency=1000, samplerate=48000, gain_db=6, and a negative q_factor.
  Act: Invoke the make_lowshelf function with the initialized parameters.
  Assert: Check if the function can handle a negative q_factor without errors and if the output is within an acceptable range.
Validation:
  This test is important to ensure the function's robustness and its ability to handle edge cases gracefully. The expected result is based on the function's specifications and mathematical calculations.
"""

# ********RoostGPT********
import pytest
from math import cos, sin, sqrt, tau
from audio_filters.iir_filter import IIRFilter
from butterworth_filter import make_lowshelf

class Test_ButterworthFilterMakeLowshelf:

    @pytest.mark.regression
    def test_make_lowshelf_valid_inputs(self):
        filter = make_lowshelf(1000, 48000, 6, 1/sqrt(2))
        expected_a_coeffs = [3.0409336710888786, -5.608870992220748, 2.602157875636628]
        expected_b_coeffs = [3.139954022810743, -5.591841778072785, 2.5201667380627257]
        assert filter.a_coeffs == expected_a_coeffs
        assert filter.b_coeffs == expected_b_coeffs

    @pytest.mark.regression
    @pytest.mark.parametrize("frequency", [1, 96000])
    def test_make_lowshelf_frequency_extremes(self, frequency):
        filter = make_lowshelf(frequency, 48000, 6, 1/sqrt(2))
        assert isinstance(filter, IIRFilter)

    @pytest.mark.regression
    def test_make_lowshelf_zero_gain_db(self):
        filter = make_lowshelf(1000, 48000, 0, 1/sqrt(2))
        assert isinstance(filter, IIRFilter)

    @pytest.mark.regression
    def test_make_lowshelf_negative_q_factor(self):
        with pytest.raises(ValueError):
            make_lowshelf(1000, 48000, 6, -1)
